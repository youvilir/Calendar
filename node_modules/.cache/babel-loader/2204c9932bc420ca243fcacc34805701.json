{"ast":null,"code":"const DAYS_IN_WEEK = 7;\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst Month = {\n  January: 0,\n  Febbruary: 1,\n  March: 2,\n  April: 3,\n  May: 4,\n  June: 5,\n  July: 6,\n  August: 7,\n  September: 8,\n  October: 9,\n  November: 10,\n  December: 11\n};\nexport function isLeapYear(year) {\n  return !(year % 4 || !(year % 100) && year % 400);\n}\nexport function getDaysInMonth(date) {\n  //количество дней в месяце\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  const daysInMonth = DAYS_IN_MONTH[month];\n\n  if (isLeapYear(year) && month === Month.Febbruary) {\n    return daysInMonth + 1;\n  } else {\n    return daysInMonth;\n  }\n}\nexport function getDayOfWeek(date) {\n  // получаем день недели \n  const dayOfWeek = date.getDay();\n  if (dayOfWeek === 0) return 6;\n  return dayOfWeek - 1;\n}\nexport function getMonthData(year, month) {\n  const result = [];\n  const date = new Date(year, month);\n  const daysInMonth = getDaysInMonth(date);\n  const monthStartsOn = getDayOfWeek(date);\n  let day = 1;\n\n  for (let i = 0; i < (daysInMonth + monthStartsOn) / DAYS_IN_WEEK; i++) {\n    result[i] = [];\n\n    for (let j = 0; j < DAYS_IN_WEEK; j++) {\n      if (i === 0 && j < monthStartsOn || day > daysInMonth) {\n        result[i][j] = undefined;\n      } else {\n        result[i][j] = new Date(year, month, day++);\n      }\n    }\n  }\n\n  return result;\n}\n;","map":{"version":3,"sources":["C:/Users/youvi/calendar-react/src/components/Calendar/calendar.js"],"names":["DAYS_IN_WEEK","DAYS_IN_MONTH","Month","January","Febbruary","March","April","May","June","July","August","September","October","November","December","isLeapYear","year","getDaysInMonth","date","month","getMonth","getFullYear","daysInMonth","getDayOfWeek","dayOfWeek","getDay","getMonthData","result","Date","monthStartsOn","day","i","j","undefined"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAArB;AAEA,MAAMC,aAAa,GAAG,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,EAAgB,EAAhB,EAAmB,EAAnB,EAAsB,EAAtB,EAAyB,EAAzB,EAA4B,EAA5B,EAA+B,EAA/B,EAAkC,EAAlC,CAAtB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,OAAO,EAAE,CADC;AAEVC,EAAAA,SAAS,EAAE,CAFD;AAGVC,EAAAA,KAAK,EAAE,CAHG;AAIVC,EAAAA,KAAK,EAAE,CAJG;AAKVC,EAAAA,GAAG,EAAE,CALK;AAMVC,EAAAA,IAAI,EAAE,CANI;AAOVC,EAAAA,IAAI,EAAE,CAPI;AAQVC,EAAAA,MAAM,EAAE,CARE;AASVC,EAAAA,SAAS,EAAE,CATD;AAUVC,EAAAA,OAAO,EAAE,CAVC;AAWVC,EAAAA,QAAQ,EAAE,EAXA;AAYVC,EAAAA,QAAQ,EAAE;AAZA,CAAd;AAgBA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AAC5B,SAAO,EAAGA,IAAI,GAAG,CAAR,IAAe,EAAEA,IAAI,GAAG,GAAT,KAAkBA,IAAI,GAAG,GAA1C,CAAP;AACH;AAED,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA6B;AAAC;AACjC,QAAMC,KAAK,GAAGD,IAAI,CAACE,QAAL,EAAd;AACA,QAAMJ,IAAI,GAAEE,IAAI,CAACG,WAAL,EAAZ;AACA,QAAMC,WAAW,GAAGrB,aAAa,CAACkB,KAAD,CAAjC;;AAEA,MAAGJ,UAAU,CAACC,IAAD,CAAV,IAAoBG,KAAK,KAAKjB,KAAK,CAACE,SAAvC,EAAiD;AAE7C,WAAOkB,WAAW,GAAG,CAArB;AAEH,GAJD,MAIO;AACH,WAAOA,WAAP;AACH;AAEJ;AAED,OAAO,SAASC,YAAT,CAAsBL,IAAtB,EAA2B;AAAC;AAC/B,QAAMM,SAAS,GAAGN,IAAI,CAACO,MAAL,EAAlB;AAEA,MAAGD,SAAS,KAAK,CAAjB,EAAoB,OAAO,CAAP;AAEpB,SAAOA,SAAS,GAAG,CAAnB;AACH;AAED,OAAO,SAASE,YAAT,CAAsBV,IAAtB,EAA4BG,KAA5B,EAAkC;AACrC,QAAMQ,MAAM,GAAG,EAAf;AACA,QAAMT,IAAI,GAAG,IAAIU,IAAJ,CAASZ,IAAT,EAAcG,KAAd,CAAb;AACA,QAAMG,WAAW,GAAGL,cAAc,CAACC,IAAD,CAAlC;AACA,QAAMW,aAAa,GAAGN,YAAY,CAACL,IAAD,CAAlC;AACA,MAAIY,GAAG,GAAG,CAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAACT,WAAW,GAAGO,aAAf,IAA+B7B,YAAnD,EAAiE+B,CAAC,EAAlE,EAAsE;AAClEJ,IAAAA,MAAM,CAACI,CAAD,CAAN,GAAY,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhC,YAApB,EAAkCgC,CAAC,EAAnC,EAAuC;AACnC,UAAKD,CAAC,KAAK,CAAN,IAAWC,CAAC,GAAGH,aAAhB,IAAkCC,GAAG,GAAGR,WAA5C,EAAwD;AACpDK,QAAAA,MAAM,CAACI,CAAD,CAAN,CAAUC,CAAV,IAAeC,SAAf;AACH,OAFD,MAEO;AACHN,QAAAA,MAAM,CAACI,CAAD,CAAN,CAAUC,CAAV,IAAe,IAAIJ,IAAJ,CAASZ,IAAT,EAAeG,KAAf,EAAsBW,GAAG,EAAzB,CAAf;AACH;AACJ;AAEJ;;AAED,SAAOH,MAAP;AACH;AAAA","sourcesContent":["const DAYS_IN_WEEK = 7;\r\n\r\nconst DAYS_IN_MONTH = [31,28,31,30,31,30,31,31,30,31,30,31];\r\n\r\nconst Month = {\r\n    January: 0,\r\n    Febbruary: 1,\r\n    March: 2,\r\n    April: 3,\r\n    May: 4,\r\n    June: 5,\r\n    July: 6,\r\n    August: 7,\r\n    September: 8,\r\n    October: 9,\r\n    November: 10, \r\n    December: 11\r\n};\r\n\r\n\r\nexport function isLeapYear(year){\r\n    return !((year % 4) || (!(year % 100) && (year % 400)));\r\n}\r\n\r\nexport function getDaysInMonth(date){//количество дней в месяце\r\n    const month = date.getMonth();\r\n    const year= date.getFullYear();\r\n    const daysInMonth = DAYS_IN_MONTH[month];\r\n\r\n    if(isLeapYear(year) && month === Month.Febbruary){\r\n        \r\n        return daysInMonth + 1;\r\n\r\n    } else {\r\n        return daysInMonth;\r\n    }\r\n\r\n}\r\n\r\nexport function getDayOfWeek(date){// получаем день недели \r\n    const dayOfWeek = date.getDay();\r\n\r\n    if(dayOfWeek === 0) return 6;\r\n\r\n    return dayOfWeek - 1;\r\n}\r\n\r\nexport function getMonthData(year, month){\r\n    const result = [];\r\n    const date = new Date(year,month);\r\n    const daysInMonth = getDaysInMonth(date);\r\n    const monthStartsOn = getDayOfWeek(date);\r\n    let day = 1;\r\n\r\n    for (let i = 0; i < (daysInMonth + monthStartsOn)/ DAYS_IN_WEEK; i++) {\r\n        result[i] = [];\r\n \r\n        for (let j = 0; j < DAYS_IN_WEEK; j++) {\r\n            if( (i === 0 && j < monthStartsOn) || day > daysInMonth){\r\n                result[i][j] = undefined;\r\n            } else {\r\n                result[i][j] = new Date(year, month, day++);\r\n            }         \r\n        }\r\n        \r\n    }\r\n\r\n    return result;\r\n};"]},"metadata":{},"sourceType":"module"}